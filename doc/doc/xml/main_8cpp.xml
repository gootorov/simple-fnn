<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="yes">mnist/mnist_reader.hpp</includes>
    <includes local="yes">mnist/mnist_utils.hpp</includes>
    <includes refid="network_8hpp" local="yes">network.hpp</includes>
    <incdepgraph>
      <node id="34">
        <label>mnist/mnist_reader.hpp</label>
      </node>
      <node id="37">
        <label>layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>mnist/mnist_utils.hpp</label>
      </node>
      <node id="33">
        <label>Eigen/Core</label>
      </node>
      <node id="31">
        <label>/home/null/dev/cpp/neural_net/src/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>iostream</label>
      </node>
      <node id="36">
        <label>network.hpp</label>
        <link refid="network_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1af004872936d17152d1a1640ef59eaecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double normalize</definition>
        <argsstring>(double pixel)</argsstring>
        <name>normalize</name>
        <param>
          <type>double</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/null/dev/cpp/neural_net/src/main.cpp" line="14" column="1" bodyfile="/home/null/dev/cpp/neural_net/src/main.cpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a5d11ead7e124d0f06ec925e47cd4f000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void load_data</definition>
        <argsstring>(std::vector&lt; std::vector&lt; double &gt;&gt; &amp;source, std::vector&lt; Eigen::VectorXd &gt; &amp;target)</argsstring>
        <name>load_data</name>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/null/dev/cpp/neural_net/src/main.cpp" line="20" column="1" bodyfile="/home/null/dev/cpp/neural_net/src/main.cpp" bodystart="20" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a14231affd8d1700771885e247c858510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vectorize_labels</definition>
        <argsstring>(std::vector&lt; Eigen::VectorXd &gt; &amp;vectorized_labels, std::vector&lt; uint8_t &gt; &amp;labels)</argsstring>
        <name>vectorize_labels</name>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>vectorized_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/null/dev/cpp/neural_net/src/main.cpp" line="32" column="1" bodyfile="/home/null/dev/cpp/neural_net/src/main.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/null/dev/cpp/neural_net/src/main.cpp" line="43" column="1" bodyfile="/home/null/dev/cpp/neural_net/src/main.cpp" bodystart="43" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/null/dev/cpp/neural_net/src/main.cpp"/>
  </compounddef>
</doxygen>
